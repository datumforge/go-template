{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/datumforge/go-template/config/config.-config",
  "$defs": {
    "[]string": {
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "cache.Config": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "address": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "db": {
          "type": "integer"
        },
        "dialTimeout": {
          "type": "integer"
        },
        "readTimeout": {
          "type": "integer"
        },
        "writeTimeout": {
          "type": "integer"
        },
        "maxRetries": {
          "type": "integer"
        },
        "minIdleConns": {
          "type": "integer"
        },
        "maxIdleConns": {
          "type": "integer"
        },
        "maxActiveConns": {
          "type": "integer"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "config.Auth": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enabled authentication on the server, not recommended to disable"
        },
        "token": {
          "$ref": "#/$defs/tokens.Config",
          "description": "Token contains the token config settings for Datum issued tokens"
        },
        "supportedProviders": {
          "$ref": "#/$defs/[]string",
          "description": "SupportedProviders are the supported oauth providers that have been configured"
        },
        "providers": {
          "$ref": "#/$defs/handlers.OauthProviderConfig",
          "description": "Providers contains supported oauth2 providers configuration"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "token"
      ],
      "description": "Auth settings including oauth2 providers and datum token configuration"
    },
    "config.CORS": {
      "properties": {
        "allow_origins": {
          "$ref": "#/$defs/[]string",
          "description": "AllowOrigins is a list of allowed origin to indicate whether the response can be shared with\nrequesting code from the given origin"
        },
        "cookie_insecure": {
          "type": "boolean",
          "description": "CookieInsecure allows CSRF cookie to be sent to servers that the browser considers\nunsecured. Useful for cases where the connection is secured via VPN rather than\nHTTPS directly."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "CORS settings for the server to allow cross origin requests"
    },
    "config.Server": {
      "properties": {
        "debug": {
          "type": "boolean",
          "description": "Debug enables debug mode for the server"
        },
        "dev": {
          "type": "boolean",
          "description": "Dev enables echo's dev mode options"
        },
        "listen": {
          "type": "string",
          "description": "Listen sets the listen address to serve the echo server on"
        },
        "shutdown_grace_period": {
          "type": "integer",
          "description": "ShutdownGracePeriod sets the grace period for in flight requests before shutting down"
        },
        "read_timeout": {
          "type": "integer",
          "description": "ReadTimeout sets the maximum duration for reading the entire request including the body"
        },
        "write_timeout": {
          "type": "integer",
          "description": "WriteTimeout sets the maximum duration before timing out writes of the response"
        },
        "idle_timeout": {
          "type": "integer",
          "description": "IdleTimeout sets the maximum amount of time to wait for the next request when keep-alives are enabled"
        },
        "read_header_timeout": {
          "type": "integer",
          "description": "ReadHeaderTimeout sets the amount of time allowed to read request headers"
        },
        "tls": {
          "$ref": "#/$defs/config.TLS",
          "description": "TLS contains the tls configuration settings"
        },
        "cors": {
          "$ref": "#/$defs/config.CORS",
          "description": "CORS contains settings to allow cross origin settings and insecure cookies"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "listen"
      ],
      "description": "Server settings for the echo server"
    },
    "config.TLS": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enabled turns on TLS settings for the server"
        },
        "cert_file": {
          "type": "string",
          "description": "CertFile location for the TLS server"
        },
        "cert_key": {
          "type": "string",
          "description": "CertKey file location for the TLS server"
        },
        "auto_cert": {
          "type": "boolean",
          "description": "AutoCert generates the cert with letsencrypt, this does not work on localhost"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "TLS settings for the server for secure connections"
    },
    "entx.Config": {
      "properties": {
        "debug": {
          "type": "boolean",
          "description": "debug enables printing the debug database logs"
        },
        "databaseName": {
          "type": "string",
          "description": "the name of the database to use with otel tracing"
        },
        "driverName": {
          "type": "string",
          "description": "sql driver name"
        },
        "multiWrite": {
          "type": "boolean",
          "description": "enables writing to two databases simultaneously"
        },
        "primaryDbSource": {
          "type": "string",
          "description": "dsn of the primary database"
        },
        "secondaryDbSource": {
          "type": "string",
          "description": "dsn of the secondary database if multi-write is enabled"
        },
        "cacheTTL": {
          "type": "integer",
          "description": "cache results for subsequent requests"
        },
        "runMigrations": {
          "type": "boolean",
          "description": "run migrations on startup"
        },
        "migrationProvider": {
          "type": "string",
          "description": "migration provider to use for running migrations"
        },
        "enableHistory": {
          "type": "boolean",
          "description": "enable history data to be logged to the database"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "primaryDbSource"
      ]
    },
    "github.ProviderConfig": {
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "clientEndpoint": {
          "type": "string"
        },
        "scopes": {
          "$ref": "#/$defs/[]string"
        },
        "redirectUrl": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "clientId",
        "clientSecret",
        "scopes",
        "redirectUrl"
      ]
    },
    "google.ProviderConfig": {
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "clientEndpoint": {
          "type": "string"
        },
        "scopes": {
          "$ref": "#/$defs/[]string"
        },
        "redirectUrl": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "clientId",
        "clientSecret",
        "scopes",
        "redirectUrl"
      ]
    },
    "handlers.OauthProviderConfig": {
      "properties": {
        "redirectUrl": {
          "type": "string",
          "description": "RedirectURL is the URL that the OAuth2 client will redirect to after authentication with datum"
        },
        "github": {
          "$ref": "#/$defs/github.ProviderConfig",
          "description": "Github contains the configuration settings for the Github Oauth Provider"
        },
        "google": {
          "$ref": "#/$defs/google.ProviderConfig",
          "description": "Google contains the configuration settings for the Google Oauth Provider"
        },
        "webauthn": {
          "$ref": "#/$defs/webauthn.ProviderConfig",
          "description": "Webauthn contains the configuration settings for the Webauthn Oauth Provider"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "OauthProviderConfig represents the configuration for OAuth providers such as Github and Google"
    },
    "map[string]string": {
      "additionalProperties": {
        "type": "string"
      },
      "type": "object"
    },
    "otelx.Config": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "provider": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "stdout": {
          "$ref": "#/$defs/otelx.StdOut"
        },
        "otlp": {
          "$ref": "#/$defs/otelx.OTLP"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "otelx.OTLP": {
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "insecure": {
          "type": "boolean"
        },
        "certificate": {
          "type": "string"
        },
        "headers": {
          "$ref": "#/$defs/[]string"
        },
        "compression": {
          "type": "string"
        },
        "timeout": {
          "type": "integer"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "otelx.StdOut": {
      "properties": {
        "pretty": {
          "type": "boolean"
        },
        "disableTimestamp": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ratelimit.Config": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "limit": {
          "type": "number"
        },
        "burst": {
          "type": "integer"
        },
        "expires": {
          "type": "integer"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "sessions.Config": {
      "properties": {
        "signingKey": {
          "type": "string"
        },
        "encryptionKey": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "tokens.Config": {
      "properties": {
        "kid": {
          "type": "string"
        },
        "audience": {
          "type": "string"
        },
        "refreshAudience": {
          "type": "string"
        },
        "issuer": {
          "type": "string"
        },
        "accessDuration": {
          "type": "integer"
        },
        "refreshDuration": {
          "type": "integer"
        },
        "refreshOverlap": {
          "type": "integer"
        },
        "jwksEndpoint": {
          "type": "string"
        },
        "keys": {
          "$ref": "#/$defs/map[string]string"
        },
        "generateKeys": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "kid",
        "audience",
        "issuer",
        "keys"
      ]
    },
    "webauthn.ProviderConfig": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "relyingPartyId": {
          "type": "string"
        },
        "requestOrigin": {
          "type": "string"
        },
        "maxDevices": {
          "type": "integer"
        },
        "enforceTimeout": {
          "type": "boolean"
        },
        "timeout": {
          "type": "integer"
        },
        "debug": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "displayName",
        "relyingPartyId",
        "requestOrigin"
      ]
    }
  },
  "properties": {
    "refresh_interval": {
      "type": "integer",
      "description": "RefreshInterval determines how often to reload the config"
    },
    "server": {
      "$ref": "#/$defs/config.Server",
      "description": "Server contains the echo server settings"
    },
    "db": {
      "$ref": "#/$defs/entx.Config",
      "description": "DB contains the database configuration for the ent client"
    },
    "redis": {
      "$ref": "#/$defs/cache.Config",
      "description": "Redis contains the redis configuration for the key-value store"
    },
    "tracer": {
      "$ref": "#/$defs/otelx.Config",
      "description": "Tracer contains the tracing config for opentelemetry"
    },
    "sessions": {
      "$ref": "#/$defs/sessions.Config",
      "description": "Sessions config for user sessions and cookies"
    },
    "ratelimit": {
      "$ref": "#/$defs/ratelimit.Config",
      "description": "Ratelimit contains the configuration for the rate limiter"
    },
    "auth": {
      "$ref": "#/$defs/config.Auth",
      "description": "Auth contains the authentication token settings and provider(s)"
    }
  },
  "additionalProperties": false,
  "type": "object",
  "description": "Config contains the configuration for the datum server"
}