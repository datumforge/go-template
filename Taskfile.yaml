version: "3"

env:
  ATLAS_DB_URI: "sqlite://file?mode=memory&_fk=1"

tasks:
  clean-template:
    cmds:
      - bash scripts/clean.sh
      
  clean:
    cmds:
      - |
        echo "Enter the name of the ent schema object name to clean:"
        read clean;
        go run ./internal/entclean/main.go --path=internal/ent ${clean};
      - "rm -rf internal/ent/generated/^doc.go"
      - "rm -rf internal/api/^resolver.go"
      - "rm -f schema/ent.graphql"
      - "rm -f schema.graphql"
      - "rm -rf internal/datumclient/"
  ent:
    - go generate ./...
  install:
    cmds:
      - "go install github.com/go-task/task/v3/cmd/task@latest"
      - "go install github.com/hairyhenderson/gomplate/v4/cmd/gomplate@latest"
      - "go install entgo.io/ent/cmd/ent@latest"
      - "go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
      - "curl -sSf https://atlasgo.sh | sh"
      - "curl -sSL https://rover.apollo.dev/nix/latest | sh"
      - "go get -u github.com/openfga/go-sdk"
      - defer: { task: go:tidy }
  graph:
    cmds:
        - bash scripts/gen_graphql.sh
  gqlgen:
    cmds:
      - go run github.com/99designs/gqlgen generate --verbose
      - task: tidy
      - go run ./gen_schema.go
      - go run github.com/Yamashou/gqlgenc generate --configdir schema
  generate:
    cmds:
      - task: ent
      - task: graph
      - task: gqlgen
  atlas:
    aliases: [atlas]
    cmds:
      - task: atlas:create
      - task: atlas:migrate
      - task: atlas:lint
  atlas:create:
    cmds:
      - |
        echo "If there is no schema to generate, this will not create a file (hint: name it your branch name if you're not sure) - enter the name of the migration:"
        read migration;
        go run db/create_migrations.go ${migration};
#  atlas:lint:
#    - atlas migrate lint --dev-url "sqlite://file?mode=memory&_fk=1" --dir "file://db/migrations" -w   
#  atlas:migrate:
#    - atlas migrate push [youratlasorg] --dev-url "sqlite://dev?mode=memory&_fk=1" --dir "file://db/migrations"
  atlas:resethash:
    - atlas migrate hash --dir="file://db/migrations"
  rover:
    - rover dev -u http://localhost:17608/query -s schema.graphql -n datum --elv2-license=accept
    - 'open "http://localhost:4000"'
  run-dev:
    - go run main.go serve  --debug --pretty --dev
  run-dev-jwt:
    - go run main.go serve  --debug --pretty --dev --jwt-secretkey=mysupersecretkey
  go:lint:
    cmds:
      - golangci-lint run -v
  go:test:
    cmds:
      - go test -v ./...
  go:tidy:
    desc: Runs go mod tidy on the backend
    aliases: [tidy]
    cmds:
      - go mod tidy
  go:all:
    aliases: [go]
    desc: Runs all go test and lint related tasks
    cmds:
      - task: go:tidy
      - task: go:lint
      - task: go:test
  compose:fga:
    cmds:
      - "docker compose -f ./docker/docker-compose-fga.yml -p fga up -d"
      - 'open "http://localhost:3000/playground"'
  compose:datum:
    cmds:
      - "docker compose -f ./docker/docker-compose.yml -p datum up -d"
  pr:
    cmds:
      - task: generate
      - task: atlas
      - task: go